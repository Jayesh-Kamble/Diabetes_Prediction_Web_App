# -*- coding: utf-8 -*-
"""DiabetesPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g-wwzNevLg3n_cqf1DAk_kdBHZv4VMyL

Import the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis

PIMA Diabetes Dataset
"""

# loading the data set to pandas dataframe

diabetes_dataset=pd.read_csv('/content/diabetes.csv')

diabetes_dataset.head()

diabetes_dataset.shape

# getting statistical measures of data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

# 0 --> Non-Diabetic
# 1--> Diabetic

diabetes_dataset.groupby('Outcome').mean()

# Separating the data and labels

X = diabetes_dataset.drop(columns='Outcome',axis=1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""Data Standardization"""

scaler=StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""Train and Test Split"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Training The Model"""

classifier = svm.SVC(kernel='linear')

# Training the support vector Machine Classifier

classifier.fit(X_train,Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy score of training  data

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)  #compare priction_training_data  vs training_data

print('Accuracy score of the training data =',training_data_accuracy)   # 79 % accuracy

# accuracy score of test  data

X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('Accuracy score of the Test data = ',test_data_accuracy)  # 77% accuracy for test data

"""Making a prediction System"""

input_data = (0,137,40,35,168,43.1,2.288,33)  # inserted data is for diabetic person

# changing the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)  # this tell we predicting only for single input


# standardized the input data

std_data= scaler.transform(input_data_reshaped)
print(std_data)

prediction =classifier.predict(std_data)

print(prediction)

if(prediction[0]==0):
  print('Person is not diabetic')
else:
  print('The person is diabetic')



"""Saving the trained Model"""

import pickle

filename = 'trained_model.sav'
pickle.dump(classifier,open(filename,'wb'))

# Loading the saved model

loading_model = pickle.load(open('trained_model.sav','rb'))

"""User Interface"""

input_data = (0,137,40,35,168,43.1,2.288,33)

# changing the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)  # this tell we predicting only for single input


# standardized the input data

std_data= scaler.transform(input_data_reshaped)
print(std_data)

prediction =loading_model.predict(std_data)

print(prediction)

if(prediction[0]==0):
  print('Person is not diabetic')
else:
  print('The person is diabetic')